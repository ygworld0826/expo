{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getTransaction, getTransactionReceipt } from \"./api\";\nexport const fetchTransactionDetails = async txHash => {\n  try {\n    const tx = await getTransaction(txHash);\n    if (!tx) throw new Error(\"Transaction not found: Invalid or non-existent txHash\");\n    const receipt = await getTransactionReceipt(txHash);\n    if (!receipt) throw new Error(\"Transaction receipt not found\");\n    const block = await tx.getBlock();\n    const timestamp = block === null || block === void 0 ? void 0 : block.timestamp;\n    const txType = tx.type === 2 ? \"Fee Delegated Smart Contract Execution\" : \"Unknown\";\n    const amount = ethers.formatEther(tx.value);\n    const gasPrice = ethers.formatUnits(tx.gasPrice, \"gwei\");\n    const effectiveGasPrice = gasPrice;\n    const gasLimit = tx.gasLimit.toString();\n    const gasUsed = (receipt === null || receipt === void 0 ? void 0 : receipt.gasUsed.toString()) || \"0\";\n    const txFee = ethers.formatEther(BigInt((receipt === null || receipt === void 0 ? void 0 : receipt.gasUsed) || 0) * tx.gasPrice);\n    const burntFee = \"0\";\n    const feePayer = tx.feePayer || \"N/A\";\n    const feeRatio = tx.feeRatio || \"1\";\n    const feePayerFee = txFee;\n    const fromFee = \"0\";\n    const nonce = tx.nonce.toString();\n    const methodId = tx.data.slice(0, 10);\n    const methodSig = \"N/A\";\n    return {\n      hash: tx.hash,\n      status: receipt === null || receipt === void 0 ? void 0 : receipt.status,\n      blockNumber: tx.blockNumber,\n      timestamp,\n      txType,\n      from: tx.from,\n      to: tx.to,\n      amount,\n      txFee,\n      gasPrice,\n      effectiveGasPrice,\n      gasLimit,\n      gasUsed,\n      burntFee,\n      feePayer,\n      feeRatio,\n      feePayerFee,\n      fromFee,\n      nonce,\n      methodId,\n      methodSig\n    };\n  } catch (error) {\n    console.error(\"Error fetching transaction details:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["ethers","getTransaction","getTransactionReceipt","fetchTransactionDetails","txHash","tx","Error","receipt","block","getBlock","timestamp","txType","type","amount","formatEther","value","gasPrice","formatUnits","effectiveGasPrice","gasLimit","toString","gasUsed","txFee","BigInt","burntFee","feePayer","feeRatio","feePayerFee","fromFee","nonce","methodId","data","slice","methodSig","hash","status","blockNumber","from","to","error","console"],"sources":["/Users/sungwoocho/Desktop/expo/src/services/transaction.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { getTransaction, getTransactionReceipt } from \"./api\";\nimport { Transaction } from \"../types/transaction\";\n\nexport const fetchTransactionDetails = async (txHash: string): Promise<Transaction> => {\n  try {\n    const tx = await getTransaction(txHash);\n    if (!tx) throw new Error(\"Transaction not found: Invalid or non-existent txHash\");\n\n    const receipt = await getTransactionReceipt(txHash);\n    if (!receipt) throw new Error(\"Transaction receipt not found\");\n\n    const block = await tx.getBlock();\n    const timestamp = block?.timestamp;\n\n    const txType = tx.type === 2 ? \"Fee Delegated Smart Contract Execution\" : \"Unknown\";\n    const amount = ethers.formatEther(tx.value);\n    const gasPrice = ethers.formatUnits(tx.gasPrice, \"gwei\");\n    const effectiveGasPrice = gasPrice;\n    const gasLimit = tx.gasLimit.toString();\n    const gasUsed = receipt?.gasUsed.toString() || \"0\";\n    const txFee = ethers.formatEther(BigInt(receipt?.gasUsed || 0) * tx.gasPrice);\n    const burntFee = \"0\";\n    const feePayer = (tx as any).feePayer || \"N/A\";\n    const feeRatio = (tx as any).feeRatio || \"1\";\n    const feePayerFee = txFee;\n    const fromFee = \"0\";\n    const nonce = tx.nonce.toString();\n    const methodId = tx.data.slice(0, 10);\n    const methodSig = \"N/A\";\n\n    return {\n      hash: tx.hash,\n      status: receipt?.status,\n      blockNumber: tx.blockNumber,\n      timestamp,\n      txType,\n      from: tx.from,\n      to: tx.to,\n      amount,\n      txFee,\n      gasPrice,\n      effectiveGasPrice,\n      gasLimit,\n      gasUsed,\n      burntFee,\n      feePayer,\n      feeRatio,\n      feePayerFee,\n      fromFee,\n      nonce,\n      methodId,\n      methodSig,\n    };\n  } catch (error) {\n    console.error(\"Error fetching transaction details:\", error);\n    throw error;\n  }\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,OAAO;AAG7D,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,MAAc,IAA2B;EACrF,IAAI;IACF,MAAMC,EAAE,GAAG,MAAMJ,cAAc,CAACG,MAAM,CAAC;IACvC,IAAI,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;IAEjF,MAAMC,OAAO,GAAG,MAAML,qBAAqB,CAACE,MAAM,CAAC;IACnD,IAAI,CAACG,OAAO,EAAE,MAAM,IAAID,KAAK,CAAC,+BAA+B,CAAC;IAE9D,MAAME,KAAK,GAAG,MAAMH,EAAE,CAACI,QAAQ,CAAC,CAAC;IACjC,MAAMC,SAAS,GAAGF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,SAAS;IAElC,MAAMC,MAAM,GAAGN,EAAE,CAACO,IAAI,KAAK,CAAC,GAAG,wCAAwC,GAAG,SAAS;IACnF,MAAMC,MAAM,GAAGb,MAAM,CAACc,WAAW,CAACT,EAAE,CAACU,KAAK,CAAC;IAC3C,MAAMC,QAAQ,GAAGhB,MAAM,CAACiB,WAAW,CAACZ,EAAE,CAACW,QAAQ,EAAE,MAAM,CAAC;IACxD,MAAME,iBAAiB,GAAGF,QAAQ;IAClC,MAAMG,QAAQ,GAAGd,EAAE,CAACc,QAAQ,CAACC,QAAQ,CAAC,CAAC;IACvC,MAAMC,OAAO,GAAG,CAAAd,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEc,OAAO,CAACD,QAAQ,CAAC,CAAC,KAAI,GAAG;IAClD,MAAME,KAAK,GAAGtB,MAAM,CAACc,WAAW,CAACS,MAAM,CAAC,CAAAhB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEc,OAAO,KAAI,CAAC,CAAC,GAAGhB,EAAE,CAACW,QAAQ,CAAC;IAC7E,MAAMQ,QAAQ,GAAG,GAAG;IACpB,MAAMC,QAAQ,GAAIpB,EAAE,CAASoB,QAAQ,IAAI,KAAK;IAC9C,MAAMC,QAAQ,GAAIrB,EAAE,CAASqB,QAAQ,IAAI,GAAG;IAC5C,MAAMC,WAAW,GAAGL,KAAK;IACzB,MAAMM,OAAO,GAAG,GAAG;IACnB,MAAMC,KAAK,GAAGxB,EAAE,CAACwB,KAAK,CAACT,QAAQ,CAAC,CAAC;IACjC,MAAMU,QAAQ,GAAGzB,EAAE,CAAC0B,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IACrC,MAAMC,SAAS,GAAG,KAAK;IAEvB,OAAO;MACLC,IAAI,EAAE7B,EAAE,CAAC6B,IAAI;MACbC,MAAM,EAAE5B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4B,MAAM;MACvBC,WAAW,EAAE/B,EAAE,CAAC+B,WAAW;MAC3B1B,SAAS;MACTC,MAAM;MACN0B,IAAI,EAAEhC,EAAE,CAACgC,IAAI;MACbC,EAAE,EAAEjC,EAAE,CAACiC,EAAE;MACTzB,MAAM;MACNS,KAAK;MACLN,QAAQ;MACRE,iBAAiB;MACjBC,QAAQ;MACRE,OAAO;MACPG,QAAQ;MACRC,QAAQ;MACRC,QAAQ;MACRC,WAAW;MACXC,OAAO;MACPC,KAAK;MACLC,QAAQ;MACRG;IACF,CAAC;EACH,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}