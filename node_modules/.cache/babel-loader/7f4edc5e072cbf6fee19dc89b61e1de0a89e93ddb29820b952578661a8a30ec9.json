{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getTransaction, getTransactionReceipt } from \"./api\";\nexport const fetchTransactionDetails = async txHash => {\n  const tx = await getTransaction(txHash);\n  const receipt = await getTransactionReceipt(txHash);\n  if (!tx) throw new Error(\"Transaction not found\");\n  const block = await tx.getBlock();\n  const timestamp = block === null || block === void 0 ? void 0 : block.timestamp;\n  const txType = tx.type === 2 ? \"Fee Delegated Smart Contract Execution\" : \"Unknown\";\n  const amount = ethers.formatEther(tx.value);\n  const gasPrice = ethers.formatUnits(tx.gasPrice, \"gwei\");\n  const effectiveGasPrice = gasPrice;\n  const gasLimit = tx.gasLimit.toString();\n  const gasUsed = (receipt === null || receipt === void 0 ? void 0 : receipt.gasUsed.toString()) || \"0\";\n  const txFee = ethers.formatEther(BigInt((receipt === null || receipt === void 0 ? void 0 : receipt.gasUsed) || 0) * tx.gasPrice);\n  const burntFee = \"0\";\n  const feePayer = tx.feePayer || \"N/A\";\n  const feeRatio = tx.feeRatio || \"1\";\n  const feePayerFee = txFee;\n  const fromFee = \"0\";\n  const nonce = tx.nonce.toString();\n  const methodId = tx.data.slice(0, 10);\n  const methodSig = \"N/A\";\n  return {\n    hash: tx.hash,\n    status: receipt === null || receipt === void 0 ? void 0 : receipt.status,\n    blockNumber: tx.blockNumber,\n    timestamp,\n    txType,\n    from: tx.from,\n    to: tx.to,\n    amount,\n    txFee,\n    gasPrice,\n    effectiveGasPrice,\n    gasLimit,\n    gasUsed,\n    burntFee,\n    feePayer,\n    feeRatio,\n    feePayerFee,\n    fromFee,\n    nonce,\n    methodId,\n    methodSig\n  };\n};","map":{"version":3,"names":["ethers","getTransaction","getTransactionReceipt","fetchTransactionDetails","txHash","tx","receipt","Error","block","getBlock","timestamp","txType","type","amount","formatEther","value","gasPrice","formatUnits","effectiveGasPrice","gasLimit","toString","gasUsed","txFee","BigInt","burntFee","feePayer","feeRatio","feePayerFee","fromFee","nonce","methodId","data","slice","methodSig","hash","status","blockNumber","from","to"],"sources":["/Users/sungwoocho/Desktop/expo/src/services/transaction.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { getTransaction, getTransactionReceipt } from \"./api\";\nimport { Transaction } from \"../types/transaction\";\n\nexport const fetchTransactionDetails = async (txHash: string): Promise<Transaction> => {\n  const tx = await getTransaction(txHash);\n  const receipt = await getTransactionReceipt(txHash);\n\n  if (!tx) throw new Error(\"Transaction not found\");\n\n  const block = await tx.getBlock();\n  const timestamp = block?.timestamp;\n\n  const txType = tx.type === 2 ? \"Fee Delegated Smart Contract Execution\" : \"Unknown\";\n  const amount = ethers.formatEther(tx.value);\n  const gasPrice = ethers.formatUnits(tx.gasPrice, \"gwei\");\n  const effectiveGasPrice = gasPrice;\n  const gasLimit = tx.gasLimit.toString();\n  const gasUsed = receipt?.gasUsed.toString() || \"0\";\n  const txFee = ethers.formatEther(BigInt(receipt?.gasUsed || 0) * tx.gasPrice);\n  const burntFee = \"0\";\n  const feePayer = (tx as any).feePayer || \"N/A\";\n  const feeRatio = (tx as any).feeRatio || \"1\";\n  const feePayerFee = txFee;\n  const fromFee = \"0\";\n  const nonce = tx.nonce.toString();\n  const methodId = tx.data.slice(0, 10);\n  const methodSig = \"N/A\";\n\n  return {\n    hash: tx.hash,\n    status: receipt?.status,\n    blockNumber: tx.blockNumber,\n    timestamp,\n    txType,\n    from: tx.from,\n    to: tx.to,\n    amount,\n    txFee,\n    gasPrice,\n    effectiveGasPrice,\n    gasLimit,\n    gasUsed,\n    burntFee,\n    feePayer,\n    feeRatio,\n    feePayerFee,\n    fromFee,\n    nonce,\n    methodId,\n    methodSig,\n  };\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,OAAO;AAG7D,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,MAAc,IAA2B;EACrF,MAAMC,EAAE,GAAG,MAAMJ,cAAc,CAACG,MAAM,CAAC;EACvC,MAAME,OAAO,GAAG,MAAMJ,qBAAqB,CAACE,MAAM,CAAC;EAEnD,IAAI,CAACC,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;EAEjD,MAAMC,KAAK,GAAG,MAAMH,EAAE,CAACI,QAAQ,CAAC,CAAC;EACjC,MAAMC,SAAS,GAAGF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,SAAS;EAElC,MAAMC,MAAM,GAAGN,EAAE,CAACO,IAAI,KAAK,CAAC,GAAG,wCAAwC,GAAG,SAAS;EACnF,MAAMC,MAAM,GAAGb,MAAM,CAACc,WAAW,CAACT,EAAE,CAACU,KAAK,CAAC;EAC3C,MAAMC,QAAQ,GAAGhB,MAAM,CAACiB,WAAW,CAACZ,EAAE,CAACW,QAAQ,EAAE,MAAM,CAAC;EACxD,MAAME,iBAAiB,GAAGF,QAAQ;EAClC,MAAMG,QAAQ,GAAGd,EAAE,CAACc,QAAQ,CAACC,QAAQ,CAAC,CAAC;EACvC,MAAMC,OAAO,GAAG,CAAAf,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEe,OAAO,CAACD,QAAQ,CAAC,CAAC,KAAI,GAAG;EAClD,MAAME,KAAK,GAAGtB,MAAM,CAACc,WAAW,CAACS,MAAM,CAAC,CAAAjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEe,OAAO,KAAI,CAAC,CAAC,GAAGhB,EAAE,CAACW,QAAQ,CAAC;EAC7E,MAAMQ,QAAQ,GAAG,GAAG;EACpB,MAAMC,QAAQ,GAAIpB,EAAE,CAASoB,QAAQ,IAAI,KAAK;EAC9C,MAAMC,QAAQ,GAAIrB,EAAE,CAASqB,QAAQ,IAAI,GAAG;EAC5C,MAAMC,WAAW,GAAGL,KAAK;EACzB,MAAMM,OAAO,GAAG,GAAG;EACnB,MAAMC,KAAK,GAAGxB,EAAE,CAACwB,KAAK,CAACT,QAAQ,CAAC,CAAC;EACjC,MAAMU,QAAQ,GAAGzB,EAAE,CAAC0B,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACrC,MAAMC,SAAS,GAAG,KAAK;EAEvB,OAAO;IACLC,IAAI,EAAE7B,EAAE,CAAC6B,IAAI;IACbC,MAAM,EAAE7B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE6B,MAAM;IACvBC,WAAW,EAAE/B,EAAE,CAAC+B,WAAW;IAC3B1B,SAAS;IACTC,MAAM;IACN0B,IAAI,EAAEhC,EAAE,CAACgC,IAAI;IACbC,EAAE,EAAEjC,EAAE,CAACiC,EAAE;IACTzB,MAAM;IACNS,KAAK;IACLN,QAAQ;IACRE,iBAAiB;IACjBC,QAAQ;IACRE,OAAO;IACPG,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,WAAW;IACXC,OAAO;IACPC,KAAK;IACLC,QAAQ;IACRG;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}